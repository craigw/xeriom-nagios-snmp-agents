#! /usr/bin/env ruby

# SPECIAL REQUIREMENTS
# ====================
#
# The user that snmpd runs as will need to be able to run xenstore-ls as root.
#
# Internally it uses this command:
#
#     sudo /usr/bin/xenstore-ls /local/domain
#
# To allow that I added this line to my /etc/sudoers:
#
#     snmp ALL = NOPASSWD: /usr/bin/xenstore-ls /local/domain
#
# You may need to change this line depending on where xenstore-ls is found and
# which user your snmpd executs pass_agents as.
#
$:.unshift(File.dirname(__FILE__) + '/../vendor/snmp-tools/lib')
require 'snmp-tools'

class Token
  def Token.tokenize(data)
    tokens = data.to_s.strip.split(/\n/).select{ |s|
      s.to_s != ""
    }.map { |line|
      new(line)
    }

    details = []
    current_token = nil
    tokens.each { |token|
      if token.top_level?
        details << token
        current_token = token
      elsif token.level < current_token.level
        parent_token = current_token
        current_token.level.downto(token.level) do |n|
          parent_token = parent_token.parent
        end
        token.attach_to(parent_token)
        current_token = token
      elsif token.level == current_token.level + 1
        token.attach_to(current_token)
        current_token = token
      elsif current_token.level == token.level
        token.attach_to(current_token.parent)
        current_token = token
      else
        raise "Broken Token: `#{token.to_s}` - indent not as expected."
      end
    }
    details.shift if details[0].domid.value == "0"
    details
  end

  def initialize(string, base_level = 0)
    @string = string
    @children = {}
    @base_level = base_level
    @updated_at = Time.now
  end

  def level
    @base_level + @string.gsub(/(\ *).*/, '\1').size
  end

  def key
    @string.split('=')[0].to_s.strip
  end

  def value
    @string.split('=')[1].to_s.strip.gsub(/^\"/, '').gsub(/\"$/, '')
  end

  def attach_to(parent)
    @parent = parent
    @parent.add_child(self)
  end

  def parent
    @parent
  end

  def add_child(token)
    @children[token.key.to_s] = token
  end

  def top_level?
    level == 0
  end

  def to_s_tree
    (' ' * level) + to_s + "\n" + @children.map { |k, v| v.to_s }.join('')
  end

  def to_s
    "#{key} = \"#{value}\""
  end

  def method_missing(method_name, *args)
    if args.empty? && @children.key?(method_name.to_s)
      @children[method_name.to_s]
    else
      super
    end
  end

  def [](name)
    @children.key?(name.to_s) && @children[name.to_s]
  end

  def each(&block)
    @children.each do |child|
      yield child
    end
  end

  def each_with_index(&block)
    @children.each_with_index do |child, index|
      yield child, index
    end
  end

  def respond_to?(method_name)
    @children.key?(method_name.to_s) || super
  end

  def child_names
    @children.keys
  end

  def updated_at
    @updated_at
  end
end

class Domain
  def Domain.load_tokens
    @@tokens ||= Token.tokenize(`sudo /usr/bin/xenstore-ls /local/domain`)
    Thread.new do
      loop do
        sleep 60
        @@tokens = Token.tokenize(`sudo /usr/bin/xenstore-ls /local/domain`)
      end
    end
  end

  def Domain.each_with_index(&block)
    @@tokens.each_with_index do |token, index|
      yield Domain.new(token), index
    end
  end

  def initialize(token)
    @token = token
    @last_refresh = Time.now.to_i
  end

  def method_missing(method_name, *args, &block)
    if @token.respond_to?(method_name, *args, &block)
      @token.send(method_name, *args, &block)
    else
      super
    end
  end

  def respond_to?(method_name)
    @token.respond_to?(method_name) || super
  end

  def xenstore_path
    current_token = @token
    path = [ current_token ]
    while current_token.parent
      current_token = current_token.parent
      path.unshift current_token
    end
    '/local/domain/' + path.map { |node| node.key }.join('/')
  end

  # def refresh
  #   parent = @token.parent
  #   me = Token.new((' ' * @token.level) + @token.key + ' = "' + @token.value + '"')
  #   tokens = Token.tokenize(`sudo /usr/bin/xenstore-ls #{xenstore_path}`, @token.level)
  #   tokens.each do |child|
  #     child.attach_to(me)
  #   end
  #   @token = me
  #   @last_refresh = Time.now.to_i
  # end
end

# IMPORTANT! Get your own OID from IANA or you will break things!
# It costs nothing and doesn't take very long.
#   http://pen.iana.org/pen/PenApplication.page
#
enterprise_oid = ".1.3.6.1.4.1.32919"

# Pick a base OID which all the results here will live under.
#

# .1.3.6.1.4.1.32919 = Barking Iguana Enterprise
#                   .4 = System Information
#                     .2 = Xen !!! WARNING: UNSTABLE - DO NOT USE THESE YET
#                       .1 = XenStore
#                        .1 = Instances
#                          .1 = Instance
base_oid = "#{enterprise_oid}.4.2.1.1.1"

Domain.load_tokens

agent = SnmpdPassPersistAgent.new do |snmp|
  domains_oid = "#{base_oid}.1"
  Domain.each_with_index do |dom_u, index|
    #                         .2 = DomUs
    #                           .1 = DomU
    domain_oid = "#{domains_oid}.2.#{index+1}"
    #                             .1 = Name (String)
    dom_u_name = dom_u.name.value
    if dom_u_name !~ /\.vm\.xeriom\.net$/
      dom_u_name += ".vm.xeriom.net"
    end
    snmp.push(SnmpTriple.new("#{domain_oid}.1", "string", dom_u_name))
    #                               .2 = UUID (String)
    snmp.push(SnmpTriple.new("#{domain_oid}.2", "string", dom_u.vm.value.split(/\//)[-1]))
    #                               .3 = Domain ID (Integer)
    snmp.push(SnmpTriple.new("#{domain_oid}.3", "integer", dom_u.domid.value))
    #                               .4 = Networking
    network_oid = "#{domain_oid}.4"
    #                                 .1 = Interfaces
    interfaces_oid = "#{network_oid}.1"
    dom_u.device.vif.each_with_index do |details, index|
      name, interface = *details
      #                                 .1 = Interface
      interface_oid = "#{interfaces_oid}.#{index+1}"
      #                                   .1 = Mac Address (String)
      snmp.push(SnmpTriple.new("#{interface_oid}.1", "string", interface.mac.value.upcase))
      #                                   .2 = Backend ID (String)
      snmp.push(SnmpTriple.new("#{interface_oid}.2", "string", interface["backend-id"].value))
      #                                   .3 = Backend Path (String)
      snmp.push(SnmpTriple.new("#{interface_oid}.3", "string", interface.backend.value))
      #                                   .4 = TX Ring Reference
      snmp.push(SnmpTriple.new("#{interface_oid}.4", "string", interface["tx-ring-ref"].value))
      #                                   .5 = RX Ring Reference
      snmp.push(SnmpTriple.new("#{interface_oid}.5", "string", interface["rx-ring-ref"].value))
      #                                   .6 = Event Channel (String)
      snmp.push(SnmpTriple.new("#{interface_oid}.6", "string", interface["event-channel"].value))
      #                                   .7 = State (String)
      snmp.push(SnmpTriple.new("#{interface_oid}.7", "string", interface["state"].value))
      #                                   .8 = Handle (String)
      snmp.push(SnmpTriple.new("#{interface_oid}.4", "string",interface["handle"].value))
    end
    #                                  .5 = Storage
    #                                    .1 = Block Devices
    #                                      .1 = Block Device
    #                                        .1 = Virtual Device ID (String)
    #                                        .2 = Backend ID (String)
    #                                        .3 = State (String)
    #                                        .4 = Backend Path (String)
    #                                        .5 = Ring Reference (String)
    #                                        .6 = Event Channel (String)
    #                                  .6 = Memory
    #                                    .1 = Assigned (Integer)
    #                                  .7 = CPU
    #                                    .1 = Allocated CPUs (Integer)
    #                                    .2 = Available CPUs (Integer)
    #                                    .3 = CPUs
    #                                      .1 = CPU
    #                                        .1 = ID (Integer)
    #                                        .2 = Availability (String)
    #                                  .8 = Behaviour
    #                                    .1 = Reboot Behaviour (String)
    #                                    .2 = Poweroff Behaviour (String)
    #                                    .3 = Crash Behavior (String)
    #                                  .9 = Start Time (Timeticks)
    #                                  .10 = Uptime (Timeticks)
    #                                  .11 = Image
    #                                    .1 = Summary (String)
    #                                    .2 = OS (String)
    #                                    .3 = Kernel (String)
    #                                    .4 = Kernel command line (String)
    #                                    .5 = Ram Disk (String)
    #                                  .12 = Data Retrieval Date
    snmp.push(SnmpTriple.new("#{domain_oid}.12", "string", dom_u.updated_at.strftime("%Y-%m-%dT%H:%M:%S%Z")))
  end
end

agent.run