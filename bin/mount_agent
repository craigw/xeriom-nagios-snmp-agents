#! /usr/bin/env ruby

$:.unshift(File.dirname(__FILE__) + '/../vendor/snmp-tools/lib')
require 'snmp-tools'

# IMPORTANT! Get your own OID from IANA or you will break things!
# It costs nothing and doesn't take very long.
#   http://pen.iana.org/pen/PenApplication.page
#
enterprise_oid = ".1.3.6.1.4.1.32919"

# Pick a base OID which all the results here will live under.
#
base_oid = "#{enterprise_oid}.4.1.1.1.1"

agent = SnmpdPassPersistAgent.new do |snmp|
  mount_points = `df`.strip.split(/\n/)[1..-1].map { |line|
    line.split(/\ +/)
  }
  mount_points.each_with_index do |mount_point, index|
    # For a simple query
    disk_oid = "#{base_oid}.#{index}"
    snmp.push(SnmpTriple.new("#{disk_oid}.1", "string", mount_point[5]))
    snmp.push(SnmpTriple.new("#{disk_oid}.2", "string", mount_point[0]))
    snmp.push(SnmpTriple.new("#{disk_oid}.3", "integer", mount_point[1].gsub(/[^0-9]/, '').to_i))
    snmp.push(SnmpTriple.new("#{disk_oid}.4", "integer", mount_point[2].gsub(/[^0-9]/, '').to_i))
    snmp.push(SnmpTriple.new("#{disk_oid}.5", "integer", mount_point[3].gsub(/[^0-9]/, '').to_i))
    capacity = mount_point[4].gsub(/[^0-9]/, '').to_f
    snmp.push(SnmpTriple.new("#{disk_oid}.6", "integer", capacity))

    disk_summary = "#{100.0 - capacity}% (#{mount_point[3].gsub(/[^0-9]/, '').to_i} bytes) remaining"
    disk_status_summary, disk_status_indicator = * case
    when capacity > 90.0
      [ "Mount #{mount_point[5]} CRITICAL: #{disk_summary}", 2 ]
    when capacity > 80.0
      [ "Mount #{mount_point[5]} WARNING: #{disk_summary}", 1 ]
    else
      [ "Mount #{mount_point[5]} OK: #{disk_summary}", 0 ]
    end

    snmp.push(SnmpTriple.new("#{disk_oid}.7", "string", disk_status_summary))
    snmp.push(SnmpTriple.new("#{disk_oid}.8", "integer", disk_status_indicator))
  end
end

agent.run